#!/usr/bin/env python3
# gene_information_query.py

'''
This module takes user input from the command line to
parse a unigene data file to determine what tissues
the gene is expressed in in that organism.
'''

import argparse
import re
import sys
from assignment5 import my_io, config


def main():
    '''
    This is the main function of this program, which
    calls various ancillary functions to obtain user
    input from the command line, sanitize it, and
    parse the file for the gene expression data.
    returns: tissue expression data to STDOUT
    '''
    args = get_cli_args()
    host, gene = args.host, args.gene
    host = modify_host_name(host)
    file = "/".join((config.get_unigene_directory(), host, gene +
                     "." + config.get_unigene_extension()))
    if my_io.is_valid_gene_file_name(file):
        print(f"\nFound Gene {gene} for {host}")
    else:
        print("Not found")
        print(f"Gene {gene} does not exist for {host}. "
              f"exiting now...", file=sys.stderr)
        sys.exit()
    handle = my_io.get_fh(file, 'r')
    tissues = get_gene_data(handle)
    print_output(host, gene, tissues)


def get_cli_args():
    '''
    This function obtains the user-provided arguments from the command
    line as well as providing a help function.
    '''
    parser = argparse.ArgumentParser(
        description='Give the Host and Gene name')
    parser.add_argument('-host',
                        dest='host',
                        type=str,
                        help='Name of host',
                        default="Human"
                        )
    parser.add_argument('-gene',
                        dest='gene',
                        type=str,
                        help='Name of Gene',
                        default="TGM1"
                        )
    return parser.parse_args()


def modify_host_name(host):
    '''
    This function serves to sanitize user input into
    the expected unigene format
    :param host: the organism host name provided by the user
    :return: the sanitized host name OR a list of acceptable
    host names if no match is found
    '''
    host = host.lower()
    host_dict = config.get_host_keywords()
    if host in host_dict.keys():
        return host_dict[host]
    return _print_host_directories()


def _print_host_directories():
    '''
    This helper function prints a list of acceptable user
    inputs for host names if the host name provided by the
    user does not return a match.
    :return: a list of acceptable search criteria to STDOUT
    '''
    print("Either the Host Name you are searching"
          " for is not in the database\n")
    print("or If you are trying to use the scientific "
          "name please put the name in double quotes:\n")
    print("\"Scientific name\"\n")
    print("Here is a (non-case sensitive) list of "
          "available Hosts by scientific name\n")
    host_dict = config.get_host_keywords()
    sci_names = set(host_dict.values())
    for i, val in enumerate(sci_names, start=1):
        print(f"{i:>5}. {val}")
    print("\nHere is a (non-case sensitive) list of "
          "available Hosts by common name\n")
    common_names = host_dict.keys()
    for i, k in enumerate(common_names, start=1):
        k = k.capitalize()
        print(f"{i:>5}. {k}")
    sys.exit()


def get_gene_data(file):
    '''
    This function takes the sanitized user input to parse the
    appropriate unigene data file for the tissue types of interest
    :param file: the absolute path of the unigene data file
    :return: an alphabetically sorted list of tissue types
    '''
    for line in file:
        match = re.search("^EXPRESS(.*)", line)
        if match:
            tissue_string = match.group(1)
            tissue_string = tissue_string.split(sep="|")
            result = [i.strip() for i in tissue_string]
    return sorted(result)


def print_output(host, gene, tissues):
    '''
    This compiles all the data generated by the other functions
    in this module and prints them to STDOUT
    :param host: the sanitized host name provided by the user
    :param gene: the gene name of interest
    :param tissues: a list of tissues of interest
    :return: A numbered list of identified tissues to STDOUT
    '''
    host = host.capitalize()
    len_tissue = len(tissues)
    print(f"In {host}, There are {len_tissue} tissues "
          f"that {gene} is expressed in:\n")
    for i, tissue in enumerate(tissues, start=1):
        tissue = tissue.capitalize()
        print(f"{i:>5}. {tissue}")


if __name__ == "__main__":
    main()
